/**
 * Socket.IO client
 * 
 * @author Guillermo Rauch <guillermo@learnboost.com>
 * @license The MIT license.
 * @copyright Copyright (c) 2010 LearnBoost <dev@learnboost.com>
 */

(function(){
	
	var HTMLFile = io.Transport.htmlfile = function(){
		io.Transport.XHR.apply(this, arguments);
	};
	
	io.util.inherit(HTMLFile, io.Transport.XHR);
	
	HTMLFile.prototype.type = 'htmlfile';
	
	HTMLFile.prototype._get = function(){
		var self = this;
		this._open();
	};
	
	HTMLFile.prototype._open = function(){
	  var self = this;
	  var theUrl = this._prepareUrl() + '/' + (+new Date);
	  var parsed = url.parse(theUrl);
	  var client = http.createClient(parsed.port, parsed.hostname);
	  var headers = {
	    "User-Agent": "socket.io"
	  };
	  var client_request = client.request("GET", parsed.pathname);
	  client_request.end()
	  client_request.on("response", function(response) {
	    response.on("data", function(chunk) {
	      var data = chunk.toString();
	      if(match = data.match(/parent\.s\._\("(.*)", document\);/i)) {
	        data = match[1];
          data = data.replace(/\\"/g, "\"");
          self._(data);
	      }
	    });
	  });
	};
	
	HTMLFile.prototype._ = function(data, doc){
		this._onData(data);
	};
	
	HTMLFile.prototype.disconnect = function(){
		return io.Transport.XHR.prototype.disconnect.call(this);
	};
	
	HTMLFile.check = function(){
    return true;
	};

	HTMLFile.xdomainCheck = function(){
		// we can probably do handling for sub-domains, we should test that it's cross domain but a subdomain here
		return false;
	};
	
})();