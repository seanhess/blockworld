/**
 * Socket.IO client
 * 
 * @author Guillermo Rauch <guillermo@learnboost.com>
 * @license The MIT license.
 * @copyright Copyright (c) 2010 LearnBoost <dev@learnboost.com>
 */
 
io.JSONP = [];

var httprequest = require('./lib/request');

JSONPPolling = io.Transport['jsonp-polling'] = function() {
  io.Transport.XHR.apply(this, arguments);
  this._index = io.JSONP.length;
  io.JSONP.push(this);
};

io.util.inherit(JSONPPolling, io.Transport['xhr-polling']);

JSONPPolling.prototype.type = 'jsonp-polling';

JSONPPolling.prototype._send = function(data) {
  var self = this;
  function complete() {
    this._posting = false;
    self._checkSend();
  }
  
  this._posting = true;
  httprequest({
    uri: this._prepareUrl() + '/' + (+new Date) + '/' + this._index,
    method: 'POST',
    body: "data=" + data
  }, function(error, response, body) {
    self.posting = false;
    self._checkSend()
  });
};

JSONPPolling.prototype._get = function() {
  var self = this;
  httprequest({
    uri: this._prepareUrl() + '/' + (+new Date) + '/' + this._index,
    method: "GET"
  }, function(error, response, body) {
    var match;
    if(match = body.match(/io\.JSONP\[([0-9]+)\]\._\("(.*)"\);/)) {
      data = match[2];
      data = data.replace(/\\"/g, "\"");
      io.JSONP[match[1]]._(data);
    }
  });
};

JSONPPolling.prototype._ = function() {
  this._onData.apply(this, arguments);
  this._get();
  return this;
};