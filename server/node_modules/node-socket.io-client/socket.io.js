/** Socket.IO 0.6.1 - Built with build.js */
// General requires
var http = require("http"),
    qs   = require("querystring"),
    url  = require("url");

this.io = {
  version: "0.6.1"
}
var io = this.io;
module.exports = this;
/**
 * Socket.IO client
 * 
 * @author Guillermo Rauch <guillermo@learnboost.com>
 * @license The MIT license.
 * @copyright Copyright (c) 2010 LearnBoost <dev@learnboost.com>
 */

io.util = {

	inherit: function(ctor, superCtor){
		// no support for `instanceof` for now
		for (var i in superCtor.prototype){
			ctor.prototype[i] = superCtor.prototype[i];
		}
	},

	indexOf: function(arr, item, from){
		for (var l = arr.length, i = (from < 0) ? Math.max(0, l + from) : from || 0; i < l; i++){
			if (arr[i] === item) return i;
		}
		return -1;
	},

	isArray: function(obj){
		return Object.prototype.toString.call(obj) === '[object Array]';
	},
	
  merge: function(target, additional){
    for (var i in additional)
      if (additional.hasOwnProperty(i))
        target[i] = additional[i];
  }

};

/**
 * Socket.IO client
 * 
 * @author Guillermo Rauch <guillermo@learnboost.com>
 * @license The MIT license.
 * @copyright Copyright (c) 2010 LearnBoost <dev@learnboost.com>
 */

// abstract

(function(){
	
	var frame = '~m~',
	
	stringify = function(message){
		if (Object.prototype.toString.call(message) == '[object Object]'){
			return '~j~' + JSON.stringify(message);
		} else {
			return String(message);
		}
	};
	
	Transport = io.Transport = function(base, options){
		this.base = base;
		this.options = {
			timeout: 15000 // based on heartbeat interval default
		};
		io.util.merge(this.options, options);
	};

	Transport.prototype.send = function(){
		throw new Error('Missing send() implementation');
	};

	Transport.prototype.connect = function(){
		throw new Error('Missing connect() implementation');
	};

	Transport.prototype.disconnect = function(){
		throw new Error('Missing disconnect() implementation');
	};
	
	Transport.prototype._encode = function(messages){
		var ret = '', message,
				messages = io.util.isArray(messages) ? messages : [messages];
		for (var i = 0, l = messages.length; i < l; i++){
			message = messages[i] === null || messages[i] === undefined ? '' : stringify(messages[i]);
			ret += frame + message.length + frame + message;
		}
		return ret;
	};
	
	Transport.prototype._decode = function(data){
		var messages = [], number, n;
		do {
			if (data.substr(0, 3) !== frame) return messages;
			data = data.substr(3);
			number = '', n = '';
			for (var i = 0, l = data.length; i < l; i++){
				n = Number(data.substr(i, 1));
				if (data.substr(i, 1) == n){
					number += n;
				} else {	
					data = data.substr(number.length + frame.length);
					number = Number(number);
					break;
				} 
			}
			messages.push(data.substr(0, number)); // here
			data = data.substr(number);
		} while(data !== '');
		return messages;
	};
	
	Transport.prototype._onData = function(data){
		this._setTimeout();
		var msgs = this._decode(data);
		if (msgs && msgs.length){
			for (var i = 0, l = msgs.length; i < l; i++){
				this._onMessage(msgs[i]);
			}
		}
	};
	
	Transport.prototype._setTimeout = function(){
		var self = this;
		if (this._timeout) clearTimeout(this._timeout);
		this._timeout = setTimeout(function(){
			self._onTimeout();
		}, this.options.timeout);
	};
	
	Transport.prototype._onTimeout = function(){
		this._onDisconnect();
	};
	
	Transport.prototype._onMessage = function(message){
		if (!this.sessionid){
			this.sessionid = message;
			this._onConnect();
		} else if (message.substr(0, 3) == '~h~'){
			this._onHeartbeat(message.substr(3));
		} else if (message.substr(0, 3) == '~j~'){
			this.base._onMessage(JSON.parse(message.substr(3)));
		} else {
			this.base._onMessage(message);
		}
	},
	
	Transport.prototype._onHeartbeat = function(heartbeat){
		this.send('~h~' + heartbeat); // echo
	};
	
	Transport.prototype._onConnect = function(){
		this.connected = true;
		this.connecting = false;
		this.base._onConnect();
		this._setTimeout();
	};

	Transport.prototype._onDisconnect = function(){
		this.connecting = false;
		this.connected = false;
		this.sessionid = null;
		this.base._onDisconnect();
	};

	Transport.prototype._prepareUrl = function(){
		return (this.base.options.secure ? 'https' : 'http') 
			+ '://' + this.base.host 
			+ ':' + this.base.options.port
			+ '/' + this.base.options.resource
			+ '/' + this.type
			+ (this.sessionid ? ('/' + this.sessionid) : '/');
	};

})();
/**
 * Socket.IO client
 * 
 * @author Guillermo Rauch <guillermo@learnboost.com>
 * @license The MIT license.
 * @copyright Copyright (c) 2010 LearnBoost <dev@learnboost.com>
 */

var XMLHttpRequest = require("./lib/xmlhttprequest/XMLHttpRequest").XMLHttpRequest;
(function(){
	
	var empty = new Function,
	    
	XMLHttpRequestCORS = (function(){
		var a = new XMLHttpRequest();
		return a.withCredentials != undefined;
	})(),
	
	request = function(xdomain){
		return new XMLHttpRequest();
	},
	
	XHR = io.Transport.XHR = function(){
		io.Transport.apply(this, arguments);
		this._sendBuffer = [];
	};
	
	io.util.inherit(XHR, io.Transport);
	
	XHR.prototype.connect = function(){
		this._get();
		return this;
	};
	
	XHR.prototype._checkSend = function(){
		if (!this._posting && this._sendBuffer.length){
			var encoded = this._encode(this._sendBuffer);
			this._sendBuffer = [];
			this._send(encoded);
		}
	};
	
	XHR.prototype.send = function(data){
		if (io.util.isArray(data)){
			this._sendBuffer.push.apply(this._sendBuffer, data);
		} else {
			this._sendBuffer.push(data);
		}
		this._checkSend();
		return this;
	};
	
	XHR.prototype._send = function(data){
		var self = this;
		this._posting = true;
		this._sendXhr = this._request('send', 'POST');
		this._sendXhr.onreadystatechange = function(){
			var status;
			if (self._sendXhr.readyState == 4){
				self._sendXhr.onreadystatechange = empty;
				try { status = self._sendXhr.status; } catch(e){}
				self._posting = false;
				if (status == 200){
					self._checkSend();
				} else {
					self._onDisconnect();
				}
			}
		};
		this._sendXhr.send('data=' + encodeURIComponent(data));
	};
	
	XHR.prototype.disconnect = function(){
		// send disconnection signal
		this._onDisconnect();
		return this;
	};
	
	XHR.prototype._onDisconnect = function(){
		if (this._xhr){
			this._xhr.onreadystatechange = empty;
      try {
        this._xhr.abort();
      } catch(e){}
			this._xhr = null;
		}
		if (this._sendXhr){
      this._sendXhr.onreadystatechange = empty;
      try {
        this._sendXhr.abort();
      } catch(e){}
			this._sendXhr = null;
		}
		this._sendBuffer = [];
		io.Transport.prototype._onDisconnect.call(this);
	};
	
	XHR.prototype._request = function(url, method, multipart){
		var req = request(this.base._isXDomain());
		if (multipart) req.multipart = true;
		req.open(method || 'GET', this._prepareUrl() + (url ? '/' + url : ''));
		if (method == 'POST' && 'setRequestHeader' in req){
			req.setRequestHeader('Content-type', 'application/x-www-form-urlencoded; charset=utf-8');
		}
		return req;
	};
	
	XHR.check = function(xdomain){
		try {
			if (request(xdomain)) return true;
		} catch(e){}
		return false;
	};
	
	XHR.xdomainCheck = function(){
		return XHR.check(true);
	};
	
	XHR.request = request;
	
})();

/**
 * Socket.IO client
 * 
 * @author Guillermo Rauch <guillermo@learnboost.com>
 * @license The MIT license.
 * @copyright Copyright (c) 2010 LearnBoost <dev@learnboost.com>
 */
var WebSocket = require("./lib/node-websocket-client/lib/websocket").WebSocket;
(function(){
	
	var WS = io.Transport.websocket = function(){
		io.Transport.apply(this, arguments);
	};
	
	io.util.inherit(WS, io.Transport);
	
	WS.prototype.type = 'websocket';
	
	WS.prototype.connect = function(){
		var self = this;
		this.socket = new WebSocket(this._prepareUrl());
		this.socket.onmessage = function(ev){ self._onData(ev.data); };
		this.socket.onclose = function(ev){ self._onClose(); };
    this.socket.onerror = function(e){ self._onError(e); };
		return this;
	};
	
	WS.prototype.send = function(data){
		if (this.socket) this.socket.send(this._encode(data));
		return this;
	};
	
	WS.prototype.disconnect = function(){
		if (this.socket) this.socket.close();
		return this;
	};
	
	WS.prototype._onClose = function(){
		this._onDisconnect();
		return this;
	};

  WS.prototype._onError = function(e){
    this.base.emit('error', [e]);
  };
	
	WS.prototype._prepareUrl = function(){
		return (this.base.options.secure ? 'wss' : 'ws') 
		+ '://' + this.base.host 
		+ ':' + this.base.options.port
		+ '/' + this.base.options.resource
		+ '/' + this.type
		+ (this.sessionid ? ('/' + this.sessionid) : '');
	};
	
	WS.check = function(){
		// we make sure WebSocket is not confounded with a previously loaded flash WebSocket
		return 'WebSocket' in window && WebSocket.prototype && ( WebSocket.prototype.send && !!WebSocket.prototype.send.toString().match(/native/i)) && typeof WebSocket !== "undefined";
	};

	WS.xdomainCheck = function(){
		return true;
	};
	
})();

/**
 * Socket.IO client
 * 
 * @author Guillermo Rauch <guillermo@learnboost.com>
 * @license The MIT license.
 * @copyright Copyright (c) 2010 LearnBoost <dev@learnboost.com>
 */

(function(){
	
	var Flashsocket = io.Transport.flashsocket = function(){
		io.Transport.websocket.apply(this, arguments);
	};
	
	io.util.inherit(Flashsocket, io.Transport.websocket);
	
	Flashsocket.prototype.type = 'flashsocket';
  // 
  // Flashsocket.prototype.connect = function(){
  //  var self = this, args = arguments;
  //  WebSocket.__addTask(function(){
  //    io.Transport.websocket.prototype.connect.apply(self, args);
  //  });
  //  return this;
  // };
  // 
  // Flashsocket.prototype.send = function(){
  //  var self = this, args = arguments;
  //  WebSocket.__addTask(function(){
  //    io.Transport.websocket.prototype.send.apply(self, args);
  //  });
  //  return this;
  // };
  // 
  // Flashsocket.check = function(){
  //  if (typeof WebSocket == 'undefined' || !('__addTask' in WebSocket)) return false;
  //  if (io.util.opera) return false; // opera is buggy with this transport
  //  if ('navigator' in window && 'plugins' in navigator && navigator.plugins['Shockwave Flash']){
  //    return !!navigator.plugins['Shockwave Flash'].description;
  //   }
  //  if ('ActiveXObject' in window) {
  //    try {
  //      return !!new ActiveXObject('ShockwaveFlash.ShockwaveFlash').GetVariable('$version');
  //    } catch (e) {}
  //  }
  //  return false;
  // };
  // 
  // Flashsocket.xdomainCheck = function(){
  //  return true;
  // };
  // 
})();
/**
 * Socket.IO client
 * 
 * @author Guillermo Rauch <guillermo@learnboost.com>
 * @license The MIT license.
 * @copyright Copyright (c) 2010 LearnBoost <dev@learnboost.com>
 */

(function(){
	
	var HTMLFile = io.Transport.htmlfile = function(){
		io.Transport.XHR.apply(this, arguments);
	};
	
	io.util.inherit(HTMLFile, io.Transport.XHR);
	
	HTMLFile.prototype.type = 'htmlfile';
	
	HTMLFile.prototype._get = function(){
		var self = this;
		this._open();
	};
	
	HTMLFile.prototype._open = function(){
	  var self = this;
	  var theUrl = this._prepareUrl() + '/' + (+new Date);
	  var parsed = url.parse(theUrl);
	  var client = http.createClient(parsed.port, parsed.hostname);
	  var headers = {
	    "User-Agent": "socket.io"
	  };
	  var client_request = client.request("GET", parsed.pathname);
	  client_request.end()
	  client_request.on("response", function(response) {
	    response.on("data", function(chunk) {
	      var data = chunk.toString();
	      if(match = data.match(/parent\.s\._\("(.*)", document\);/i)) {
	        data = match[1];
          data = data.replace(/\\"/g, "\"");
          self._(data);
	      }
	    });
	  });
	};
	
	HTMLFile.prototype._ = function(data, doc){
		this._onData(data);
	};
	
	HTMLFile.prototype.disconnect = function(){
		return io.Transport.XHR.prototype.disconnect.call(this);
	};
	
	HTMLFile.check = function(){
    return true;
	};

	HTMLFile.xdomainCheck = function(){
		// we can probably do handling for sub-domains, we should test that it's cross domain but a subdomain here
		return false;
	};
	
})();
/**
 * Socket.IO client
 * 
 * @author Guillermo Rauch <guillermo@learnboost.com>
 * @license The MIT license.
 * @copyright Copyright (c) 2010 LearnBoost <dev@learnboost.com>
 */

// (function(){
//  
//  var XHRMultipart = io.Transport['xhr-multipart'] = function(){
//    io.Transport.XHR.apply(this, arguments);
//  };
//  
//  io.util.inherit(XHRMultipart, io.Transport.XHR);
//  
//  XHRMultipart.prototype.type = 'xhr-multipart';
//  
//  XHRMultipart.prototype._get = function(){
//    var self = this;
//    this._xhr = this._request('', 'GET', true);
//    this._xhr.onreadystatechange = function(){
//      if (self._xhr.readyState == 3) self._onData(self._xhr.responseText);
//    };
//    this._xhr.send(null);
//  };
//  
//  XHRMultipart.check = function(){
//    return true;
//  };
// 
//  XHRMultipart.xdomainCheck = function(){
//    return true;
//  };
//  
// })();

/**
 * Socket.IO client
 * 
 * @author Guillermo Rauch <guillermo@learnboost.com>
 * @license The MIT license.
 * @copyright Copyright (c) 2010 LearnBoost <dev@learnboost.com>
 */

(function(){

	var empty = new Function(),

	XHRPolling = io.Transport['xhr-polling'] = function(){
		io.Transport.XHR.apply(this, arguments);
	};

	io.util.inherit(XHRPolling, io.Transport.XHR);

	XHRPolling.prototype.type = 'xhr-polling';

	XHRPolling.prototype.connect = function(){
		if (io.util.ios || io.util.android){
			var self = this;
			io.util.load(function(){
				setTimeout(function(){
					io.Transport.XHR.prototype.connect.call(self);
				}, 10);
			});
		} else {
			io.Transport.XHR.prototype.connect.call(this);
		}
	};

	XHRPolling.prototype._get = function(){
		var self = this;
		this._xhr = this._request(+ new Date, 'GET');
    this._xhr.onreadystatechange = function(){
      var status;
      if (self._xhr.readyState == 4){
        self._xhr.onreadystatechange = empty;
        try { status = self._xhr.status; } catch(e){}
        if (status == 200){
          self._onData(self._xhr.responseText);
          self._get();
        } else {
          self._onDisconnect();
        }
      }
    };
		this._xhr.send(null);
	};

	XHRPolling.check = function(){
		return io.Transport.XHR.check();
	};

	XHRPolling.xdomainCheck = function(){
		return io.Transport.XHR.xdomainCheck();
	};

})();

/**
 * Socket.IO client
 * 
 * @author Guillermo Rauch <guillermo@learnboost.com>
 * @license The MIT license.
 * @copyright Copyright (c) 2010 LearnBoost <dev@learnboost.com>
 */
 
io.JSONP = [];

var httprequest = require('./lib/request');

JSONPPolling = io.Transport['jsonp-polling'] = function() {
  io.Transport.XHR.apply(this, arguments);
  this._index = io.JSONP.length;
  io.JSONP.push(this);
};

io.util.inherit(JSONPPolling, io.Transport['xhr-polling']);

JSONPPolling.prototype.type = 'jsonp-polling';

JSONPPolling.prototype._send = function(data) {
  var self = this;
  function complete() {
    this._posting = false;
    self._checkSend();
  }
  
  this._posting = true;
  httprequest({
    uri: this._prepareUrl() + '/' + (+new Date) + '/' + this._index,
    method: 'POST',
    body: "data=" + data
  }, function(error, response, body) {
    self.posting = false;
    self._checkSend()
  });
};

JSONPPolling.prototype._get = function() {
  var self = this;
  httprequest({
    uri: this._prepareUrl() + '/' + (+new Date) + '/' + this._index,
    method: "GET"
  }, function(error, response, body) {
    var match;
    if(match = body.match(/io\.JSONP\[([0-9]+)\]\._\("(.*)"\);/)) {
      data = match[2];
      data = data.replace(/\\"/g, "\"");
      io.JSONP[match[1]]._(data);
    }
  });
};

JSONPPolling.prototype._ = function() {
  this._onData.apply(this, arguments);
  this._get();
  return this;
};
/**
 * Socket.IO client
 * 
 * @author Guillermo Rauch <guillermo@learnboost.com>
 * @license The MIT license.
 * @copyright Copyright (c) 2010 LearnBoost <dev@learnboost.com>
 */

var Socket = io.Socket = function(host, options){
	this.host = host;
	this.options = {
		secure: false,
		port: options.port || 80,
		resource: 'socket.io',
		transport: options.transport || 'websocket',
		transportOptions: {
			'xhr-polling': {
				timeout: 25000 // based on polling duration default
			},
			'jsonp-polling': {
				timeout: 25000
			}
		},
		connectTimeout: 5000
	};
	io.util.merge(this.options, options);
	this.connected = false;
	this.connecting = false;
	this._events = {};
	this.transport = this.getTransport();
	if (!this.transport) console.error('No transport available');
};

Socket.prototype.getTransport = function(override){
  var transport = this.options.transport;
  if (io.Transport[transport]) {
        return new io.Transport[transport](this, this.options.transportOptions[transport] || {});
      }
  return null;
};

Socket.prototype.connect = function(){
	if (this.transport && !this.connected){
		if (this.connecting) this.disconnect();
		this.connecting = true;
		this.emit('connecting', [this.transport.type]);
		this.transport.connect();
		if (this.options.connectTimeout){
			var self = this;
			this.connectTimeoutTimer = setTimeout(function(){
				if (!self.connected){
					self.disconnect();
					if (self.options.tryTransportsOnConnectTimeout && !self._rememberedTransport){
						if(!self._remainingTransports) self._remainingTransports = self.options.transports.slice(0);
						var transports = self._remainingTransports;
						while(transports.length > 0 && transports.splice(0,1)[0] != self.transport.type){}
						if(transports.length){
							self.transport = self.getTransport(transports);
							self.connect();
						}
					}
					if(!self._remainingTransports || self._remainingTransports.length == 0) self.emit('connect_failed');
				}
				if(self._remainingTransports && self._remainingTransports.length == 0) delete self._remainingTransports;
			}, this.options.connectTimeout);
		}
	}
	return this;
};

Socket.prototype.send = function(data){
	if (!this.transport || !this.transport.connected) return this._queue(data);
	this.transport.send(data);
	return this;
};

Socket.prototype.disconnect = function(){
  if (this.connectTimeoutTimer) clearTimeout(this.connectTimeoutTimer);
	this.transport.disconnect();
	return this;
};

Socket.prototype.on = function(name, fn){
	if (!(name in this._events)) this._events[name] = [];
	this._events[name].push(fn);
	return this;
};

Socket.prototype.emit = function(name, args){
  if (name in this._events){
    var events = this._events[name].concat();
    for (var i = 0, ii = events.length; i < ii; i++)
      events[i].apply(this, args === undefined ? [] : args);
  }
  return this;
};

Socket.prototype.removeEvent = function(name, fn){
	if (name in this._events){
		for (var a = 0, l = this._events[name].length; a < l; a++)
			if (this._events[name][a] == fn) this._events[name].splice(a, 1);		
	}
	return this;
};

Socket.prototype._queue = function(message){
	if (!('_queueStack' in this)) this._queueStack = [];
	this._queueStack.push(message);
	return this;
};

Socket.prototype._doQueue = function(){
	if (!('_queueStack' in this) || !this._queueStack.length) return this;
	this.transport.send(this._queueStack);
	this._queueStack = [];
	return this;
};

Socket.prototype._isXDomain = function(){
	return this.host !== this.options.domain;
};

Socket.prototype._onConnect = function(){
	this.connected = true;
	this.connecting = false;
	this._doQueue();
	this.emit('connect');
};

Socket.prototype._onMessage = function(data){
	this.emit('message', [data]);
};

Socket.prototype._onDisconnect = function(){
	var wasConnected = this.connected;
	this.connected = false;
	this.connecting = false;
	this._queueStack = [];
	if (wasConnected) this.emit('disconnect');
};

Socket.prototype.fire = Socket.prototype.emit;

Socket.prototype.addListener = Socket.prototype.addEvent = Socket.prototype.addEventListener = Socket.prototype.on;
